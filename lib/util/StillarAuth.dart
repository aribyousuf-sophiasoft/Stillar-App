import 'dart:async';import 'dart:convert';import 'package:http/http.dart' as http;import 'package:chat_app/models/user.dart';class StillarAuth {  static const _serviceBaseUrl = 'http://192.168.0.113:84/ServiceContracts/';  static final _headers = {'Content-Type': 'application/json'};  static Future<CustomerLoginResult> signInWithEmailAndPassword(      String email, String password) async {    String signInURL = _serviceBaseUrl + 'CustomerAccount.svc/CustomerLogin';    var resBody = {};    resBody["Email"] = email;    resBody["Password"] = password;    var login = {};    login["login"] = resBody;    try {      final response = await http.post(signInURL,          headers: _headers, body: jsonEncode(login));      Map<String, String> headers = response.headers;      String userID = headers['set-cookie'];      if (response.statusCode == 200) {        // If server returns an OK response, parse the JSON.        return CustomerLoginResult.fromJson(json.decode(response.body), userID);      } else {        // If that response was not OK, throw an error.        print("response.statusCode: " + response.statusCode.toString());        //throw CustomException(json.decode(response.body)["Error"]);        throw (json.decode(response.body)["Error"]);      }    } catch (e) {      throw Exception(e.toString());    }  }  static Future<CustomerSignUpResult> signUp(String firstName, String lastName,      String email, String mobileNumber, String password) async {    String signInURL = _serviceBaseUrl + 'CustomerAccount.svc/CustomerSignUp';    var resBody = {};    resBody["FirstName"] = firstName;    resBody["LastName"] = lastName;    resBody["EmailAddress"] = email;    resBody["MobileNumber"] = mobileNumber;    resBody["Password"] = password;    var login = {};    login["customer"] = resBody;    try {      final response = await http.post(signInURL,          headers: _headers, body: jsonEncode(login));      Map<String, String> headers = response.headers;      String userID = headers['set-cookie'];      if (response.statusCode == 200) {        // If server returns an OK response, parse the JSON.        return CustomerSignUpResult.fromJson(json.decode(response.body));      } else {        throw (json.decode(response.body)["Error"]);      }    } catch (e) {      throw Exception(e.toString());    }  }  static void verifyOTP(String email, String otp, String token) async {    String extendedURL =        _serviceBaseUrl + 'CustomerAccount.svc/OTPAuthenctication';    Map<String, String> requestHeaders = {      'Token': token,      'Content-Type': 'application/json'    };    var resBody = {};    resBody["Email"] = email;    resBody["Code"] = otp;    var OTP = {};    OTP["otp"] = resBody;    try {      final response = await http.post(extendedURL,          headers: requestHeaders, body: jsonEncode(OTP));      print(response.body);      if (response.statusCode == 200) {        // If server returns an OK response, parse the JSON.        //  return json.decode(response.body);      } else {        throw (json.decode(response.body)["Error"]);      }    } catch (e) {      throw Exception(e.toString());    }  }  static Future<GetCustomerProfileResult> getUserProfile(      String token, String userId) async {    String extendedURL =        _serviceBaseUrl + 'CustomerAccount.svc/GetCustomerProfile';    Map<String, String> requestHeaders = {'Token': token, 'Cookie': userId};    try {      final response = await http.get(extendedURL, headers: requestHeaders);      if (response.statusCode == 200) {        // If server returns an OK response, parse the JSON.        GetCustomerProfileResult result =            GetCustomerProfileResult.fromJson(json.decode(response.body));        if (result.statusCode == '401') {          throw Exception('Authorization Failed');        } else {          return result;        }      } else {        // If that response was not OK, throw an error.        throw Exception('Failed to load get');      }    } catch (e) {      print(e);      return null;    }  }}